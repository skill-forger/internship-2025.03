basePath: /
definitions:
  contract.BloggerFollowRequest:
    properties:
      action:
        allOf:
        - $ref: '#/definitions/static.BloggerFollowAction'
        enum:
        - follow
        - unfollow
      user_id:
        type: integer
    required:
    - action
    type: object
  contract.BloggerFollowStatusResponse:
    properties:
      is_following:
        type: boolean
      user_id:
        type: integer
    type: object
  contract.ChangePasswordRequest:
    properties:
      confirm_new_password:
        type: string
      current_password:
        type: string
      new_password:
        minLength: 8
        type: string
    required:
    - current_password
    - new_password
    type: object
  contract.ChangePasswordResponse:
    properties:
      message:
        type: string
    type: object
  contract.ChildCommentResponse:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      parent_comment_id:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/contract.ProfileResponse'
    type: object
  contract.CommentResponse:
    properties:
      child_comments:
        items:
          $ref: '#/definitions/contract.ChildCommentResponse'
        type: array
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      parent_comment_id:
        type: integer
      post:
        $ref: '#/definitions/contract.PostResponse'
      updated_at:
        type: string
      user:
        $ref: '#/definitions/contract.ProfileResponse'
    type: object
  contract.CreateCommentRequest:
    properties:
      content:
        type: string
      parent_comment_id:
        type: integer
      post_id:
        type: integer
    required:
    - content
    type: object
  contract.CreatePostRequest:
    properties:
      body:
        type: string
      is_published:
        default: false
        type: boolean
      tags:
        items:
          type: integer
        type: array
      title:
        type: string
      user_id:
        type: integer
    required:
    - body
    - title
    type: object
  contract.CreateTagRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  contract.HealthCheckResponse:
    properties:
      resource:
        type: string
      status:
        type: string
    type: object
  contract.ListCommentResponse:
    properties:
      comments:
        items:
          $ref: '#/definitions/contract.CommentResponse'
        type: array
      paging:
        $ref: '#/definitions/contract.Paging'
    type: object
  contract.ListPostResponse:
    properties:
      posts:
        items:
          $ref: '#/definitions/contract.PostResponse'
        type: array
    type: object
  contract.ListProfileResponse:
    properties:
      bloggers:
        items:
          $ref: '#/definitions/contract.ProfileResponse'
        type: array
    type: object
  contract.ListTagResponse:
    properties:
      tags:
        items:
          $ref: '#/definitions/contract.TagResponse'
        type: array
    type: object
  contract.Paging:
    properties:
      page:
        type: integer
      page_size:
        type: integer
      total:
        type: integer
    type: object
  contract.PostFavouriteRequest:
    properties:
      action:
        allOf:
        - $ref: '#/definitions/static.PostFavouriteAction'
        enum:
        - favourite
        - unfavourite
      post_id:
        type: integer
    required:
    - action
    type: object
  contract.PostFavouriteStatusResponse:
    properties:
      is_favourite:
        type: boolean
      post_id:
        type: integer
    type: object
  contract.PostResponse:
    properties:
      body:
        type: string
      created_at:
        type: string
      id:
        type: integer
      is_published:
        type: boolean
      slug:
        type: string
      tags:
        items:
          $ref: '#/definitions/contract.TagResponse'
        type: array
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/contract.ProfileResponse'
    type: object
  contract.ProfileResponse:
    properties:
      biography:
        type: string
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      profile_image:
        type: string
      pseudonym:
        type: string
      updated_at:
        type: string
    type: object
  contract.SignInRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  contract.SignInResponse:
    properties:
      expired_at:
        type: integer
      token:
        type: string
      type:
        type: string
      user_id:
        type: integer
    type: object
  contract.SignUpRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  contract.SignUpResponse:
    properties:
      user:
        $ref: '#/definitions/model.User'
    type: object
  contract.TagResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  contract.UpdateCommentRequest:
    properties:
      content:
        type: string
    required:
    - content
    type: object
  contract.UpdatePostRequest:
    properties:
      body:
        type: string
      is_published:
        type: boolean
      tags:
        items:
          type: integer
        type: array
      title:
        type: string
    type: object
  contract.UpdateProfileRequest:
    properties:
      biography:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      profile_image:
        type: string
      pseudonym:
        type: string
    type: object
  contract.VerifyEmailRequest:
    properties:
      code:
        type: integer
    required:
    - code
    type: object
  contract.VerifyEmailResponse:
    properties:
      message:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  model.User:
    properties:
      biography:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      isVerified:
        type: boolean
      lastName:
        type: string
      password:
        type: string
      profileImage:
        type: string
      pseudonym:
        type: string
      updatedAt:
        type: string
    type: object
  static.BloggerFollowAction:
    enum:
    - follow
    - unfollow
    type: string
    x-enum-varnames:
    - Follow
    - Unfollow
  static.PostFavouriteAction:
    enum:
    - favourite
    - unfavourite
    type: string
    x-enum-varnames:
    - Favourite
    - Unfavourite
host: localhost:3000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is the swagger API for golang project layout.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: golang project layout server swagger API
  version: "1.0"
paths:
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: Authenticates user via predefined credentials and return JWT Token
      parameters:
      - description: Sign In Request Payload
        in: body
        name: SignInRequest
        required: true
        schema:
          $ref: '#/definitions/contract.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/contract.SignInResponse'
            type: array
        "400":
          description: Bad Request
          schema: {}
      summary: Signs In user into the system
      tags:
      - authentication
  /auth/sign-up:
    post:
      consumes:
      - application/json
      description: Reader can sign up to become a blogger
      parameters:
      - description: Sign up request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/contract.SignUpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contract.SignUpResponse'
        "400":
          description: Bad Request
          schema: {}
      summary: Register a new user
      tags:
      - authentication
  /auth/verify:
    post:
      consumes:
      - application/json
      description: Blogger can verify their email address upon signing up
      parameters:
      - description: Email verification request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/contract.VerifyEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contract.VerifyEmailResponse'
        "400":
          description: Bad Request
          schema: {}
      summary: Verify email address
      tags:
      - authentication
  /comments:
    get:
      consumes:
      - application/json
      description: Reader/Blogger can view all comments in the blog posts
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of posts per page
        in: query
        name: page_size
        type: integer
      - in: query
        name: post_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contract.ListCommentResponse'
        "400":
          description: Bad Request
          schema: {}
      summary: Get all comments for a post
      tags:
      - comment
    post:
      consumes:
      - application/json
      description: Blogger can make a new comment/ Blogger can reply to another comment
        (with parentCMTID in request body)
      parameters:
      - description: Create Comment Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/contract.CreateCommentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contract.CommentResponse'
        "400":
          description: Bad Request
          schema: {}
      security:
      - BearerToken: []
      summary: Create a new comment
      tags:
      - comment
  /comments/{commentId}:
    delete:
      consumes:
      - application/json
      description: Blogger can delete their comment
      parameters:
      - description: comment ID
        in: path
        name: commentId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
      security:
      - BearerToken: []
      summary: Delete a comment
      tags:
      - comment
    put:
      consumes:
      - application/json
      description: Blogger can update their comment
      parameters:
      - description: Update Comment Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/contract.UpdateCommentRequest'
      - description: Comment ID
        in: path
        name: commentId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contract.CommentResponse'
        "400":
          description: Bad Request
          schema: {}
      security:
      - BearerToken: []
      summary: update a comment
      tags:
      - comment
  /favorites/bloggers:
    get:
      consumes:
      - application/json
      description: Blogger can view all the bloggers from their following list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contract.ListProfileResponse'
        "400":
          description: Bad Request
          schema: {}
      security:
      - BearerToken: []
      summary: View all followed bloggers
      tags:
      - favourite
    put:
      consumes:
      - application/json
      description: Blogger can add/remove blogger from their following list
      parameters:
      - description: Follow/unfollow action with user ID
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/contract.BloggerFollowRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contract.BloggerFollowStatusResponse'
        "400":
          description: Bad Request
          schema: {}
      security:
      - BearerToken: []
      summary: Add/remove blogger from following list
      tags:
      - favourite
  /favorites/bloggers/posts:
    get:
      consumes:
      - application/json
      description: Blogger can view all the posts of the following bloggers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contract.ListPostResponse'
        "400":
          description: Bad Request
          schema: {}
      security:
      - BearerToken: []
      summary: View posts from followed bloggers
      tags:
      - favourite
  /favorites/posts:
    get:
      consumes:
      - application/json
      description: Blogger can view all posts from their favourite list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contract.ListPostResponse'
        "400":
          description: Bad Request
          schema: {}
      security:
      - BearerToken: []
      summary: View favourite posts
      tags:
      - favourite
    put:
      consumes:
      - application/json
      description: Blogger can add/remove a post from their favourite list
      parameters:
      - description: Add/remove post from favourites action with post ID
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/contract.PostFavouriteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contract.PostFavouriteStatusResponse'
        "400":
          description: Bad Request
          schema: {}
      security:
      - BearerToken: []
      summary: Add/remove post from favourite list
      tags:
      - favourite
  /health:
    get:
      consumes:
      - application/json
      description: Perform server and dependent resource liveness check
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contract.HealthCheckResponse'
        "400":
          description: Bad Request
          schema: {}
      summary: Show server liveness
      tags:
      - health
  /posts:
    get:
      consumes:
      - application/json
      description: Reader/Blogger can view all published posts and filter by specific
        condition (e.g. tag, author)
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of posts per page
        in: query
        name: pageSize
        type: integer
      - in: query
        name: pseudonym
        type: string
      - in: query
        name: tag
        type: string
      - in: query
        name: title
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contract.ListPostResponse'
        "400":
          description: Bad Request
          schema: {}
      summary: View all published posts
      tags:
      - post
    post:
      consumes:
      - application/json
      description: Blogger can create a new post (default as draft)
      parameters:
      - description: Create post request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/contract.CreatePostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contract.PostResponse'
        "400":
          description: Bad Request
          schema: {}
      security:
      - BearerToken: []
      summary: Create a new post
      tags:
      - post
  /posts/{postId}:
    delete:
      consumes:
      - application/json
      description: Blogger can delete their own post
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
      security:
      - BearerToken: []
      summary: Delete a post
      tags:
      - post
    get:
      consumes:
      - application/json
      description: Respond post detail information
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contract.PostResponse'
        "400":
          description: Bad Request
          schema: {}
      summary: Respond post detail information
      tags:
      - post
    put:
      consumes:
      - application/json
      description: Blogger can update their post content and toggle publish/draft
        status
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: integer
      - description: Update post request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/contract.UpdatePostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contract.PostResponse'
        "400":
          description: Bad Request
          schema: {}
      security:
      - BearerToken: []
      summary: Update an existing post
      tags:
      - post
  /profile:
    put:
      consumes:
      - application/json
      description: Blogger can update their profile information
      parameters:
      - description: Update profile request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/contract.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contract.ProfileResponse'
        "400":
          description: Bad Request
          schema: {}
      security:
      - BearerToken: []
      summary: Update blogger profile
      tags:
      - profile
  /profile/{userId}:
    get:
      consumes:
      - application/json
      description: Respond profile detail information
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contract.ProfileResponse'
        "400":
          description: Bad Request
          schema: {}
      summary: Respond profile detail information
      tags:
      - profile
  /profile/change-password:
    put:
      consumes:
      - application/json
      description: Blogger can change their password
      parameters:
      - description: Change password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/contract.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contract.ChangePasswordResponse'
        "400":
          description: Bad Request
          schema: {}
      security:
      - BearerToken: []
      summary: Change blogger password
      tags:
      - profile
  /profile/posts:
    get:
      description: Blogger can view all their posts. Use query parameters to filter
        (e.g., is_published=false to view drafts).
      parameters:
      - description: Filter by status post
        in: query
        name: is_published
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contract.ListPostResponse'
        "401":
          description: Unauthorized
          schema: {}
      security:
      - BearerToken: []
      summary: View all blogger's posts
      tags:
      - profile
  /profile/posts/{postId}:
    get:
      description: Blogger can view the detail of their own post, whether it's published
        or draft
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contract.PostResponse'
        "404":
          description: Not Found
          schema: {}
      security:
      - BearerToken: []
      summary: View a specific blogger's post
      tags:
      - profile
  /tags:
    get:
      consumes:
      - application/json
      description: Readers/Bloggers can view all blog tags
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contract.ListTagResponse'
        "400":
          description: Bad Request
          schema: {}
      summary: Get all tags
      tags:
      - tag
    post:
      consumes:
      - application/json
      description: Create a new tag with the provided name
      parameters:
      - description: Create Tag Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/contract.CreateTagRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Tag created successfully
          schema:
            $ref: '#/definitions/contract.TagResponse'
        "400":
          description: Invalid request
          schema:
            type: string
        "422":
          description: Unprocessable entity
          schema:
            type: string
      security:
      - BearerToken: []
      summary: Create a new tag
      tags:
      - tag
  /tags/{id}:
    delete:
      consumes:
      - application/json
      description: Blogger can delete a tag that does not contain any blog
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
      security:
      - BearerToken: []
      summary: Delete a tag
      tags:
      - tag
  /tags/{id}/posts:
    get:
      consumes:
      - application/json
      description: Readers/Bloggers can view all blog posts belong to a particular
        tag
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contract.ListPostResponse'
        "400":
          description: Bad Request
          schema: {}
      summary: Get all posts for a tag
      tags:
      - tag
securityDefinitions:
  BearerToken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
