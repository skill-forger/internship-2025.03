basePath: /
definitions:
  contract.CreatePostRequest:
    properties:
      body:
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        type: string
    required:
    - body
    - title
    type: object
  contract.CreateTagRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  contract.HealthCheckResponse:
    properties:
      resource:
        type: string
      status:
        type: string
    type: object
  contract.ListPostResponse:
    properties:
      posts:
        items:
          $ref: '#/definitions/contract.PostResponse'
        type: array
    type: object
  contract.PostResponse:
    properties:
      body:
        type: string
      created_at:
        type: string
      id:
        type: integer
      is_public:
        type: boolean
      pseudonym:
        type: string
      slug:
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  contract.ProfileResponse:
    properties:
      biography:
        type: string
      created_at:
        type: string
      display_name:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      profile_image:
        type: string
      updated_at:
        type: string
    type: object
  contract.SignInRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  contract.SignInResponse:
    properties:
      expired_at:
        type: integer
      token:
        type: string
      type:
        type: string
      user_id:
        type: integer
    type: object
  contract.TagDetailResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  contract.UpdatePostRequest:
    properties:
      body:
        type: string
      is_public:
        default: false
        type: boolean
      tags:
        items:
          type: string
        type: array
      title:
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is the swagger API for golang project layout.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: golang project layout server swagger API
  version: "1.0"
paths:
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: Authenticates user via predefined credentials and return JWT Token
      parameters:
      - description: Sign In Request Payload
        in: body
        name: SignInRequest
        required: true
        schema:
          $ref: '#/definitions/contract.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/contract.SignInResponse'
            type: array
        "400":
          description: Bad Request
          schema: {}
      summary: Signs In user into the system
      tags:
      - authentication
  /health:
    get:
      consumes:
      - application/json
      description: Perform server and dependent resource liveness check
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contract.HealthCheckResponse'
        "400":
          description: Bad Request
          schema: {}
      summary: Show server liveness
      tags:
      - health
  /posts:
    get:
      consumes:
      - application/json
      description: Reader/Blogger can view all published posts and filter by specific
        condition (e.g. tag, author)
      parameters:
      - in: query
        name: pseudonym
        type: string
      - in: query
        name: tag
        type: string
      - in: query
        name: title
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contract.ListPostResponse'
        "400":
          description: Bad Request
          schema: {}
      summary: View all published posts
      tags:
      - post
    post:
      consumes:
      - application/json
      description: Blogger can create a new post (default as draft)
      parameters:
      - description: Create post request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/contract.CreatePostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Tag created successfully
          schema:
            $ref: '#/definitions/contract.PostResponse'
        "400":
          description: Invalid request
          schema:
            type: string
        "422":
          description: Unprocessable entity
          schema:
            type: string
      summary: Create a new tag
      tags:
      - post
  /posts/:postId:
    delete:
      consumes:
      - application/json
      description: Blogger can delete their own post
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
      security:
      - BearerToken: []
      summary: Delete a post
      tags:
      - post
    get:
      consumes:
      - application/json
      description: Respond post detail information
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contract.PostResponse'
        "400":
          description: Bad Request
          schema: {}
      summary: Respond post detail information
      tags:
      - post
    put:
      consumes:
      - application/json
      description: Blogger can update their post content and toggle publish/draft
        status
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: integer
      - description: Update post request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/contract.UpdatePostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contract.PostResponse'
        "400":
          description: Bad Request
          schema: {}
      security:
      - BearerToken: []
      summary: Update an existing post
      tags:
      - post
  /profile:
    get:
      consumes:
      - application/json
      description: Respond profile detail information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contract.ProfileResponse'
        "400":
          description: Bad Request
          schema: {}
      security:
      - BearerToken: []
      summary: Respond profile detail information
      tags:
      - profile
  /tags:
    post:
      consumes:
      - application/json
      description: Create a new tag with the provided name
      parameters:
      - description: Create Tag Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/contract.CreateTagRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Tag created successfully
          schema:
            $ref: '#/definitions/contract.TagDetailResponse'
        "400":
          description: Invalid request
          schema:
            type: string
        "422":
          description: Unprocessable entity
          schema:
            type: string
      summary: Create a new tag
      tags:
      - tag
securityDefinitions:
  BearerToken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
