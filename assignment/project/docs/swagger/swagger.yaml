basePath: /
definitions:
  contract.ChangePasswordRequest:
    properties:
      current_password:
        type: string
      new_password:
        minLength: 8
        type: string
    required:
    - current_password
    - new_password
    type: object
  contract.HealthCheckResponse:
    properties:
      resource:
        type: string
      status:
        type: string
    type: object
  contract.ProfileResponse:
    properties:
      biography:
        type: string
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      profile_image:
        type: string
      pseudonym:
        type: string
      updated_at:
        type: string
    type: object
  contract.SignInRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  contract.SignInResponse:
    properties:
      expired_at:
        type: integer
      token:
        type: string
      type:
        type: string
      user_id:
        type: integer
    type: object
  contract.SignUpRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  contract.SignUpResponse:
    properties:
      message:
        type: string
    type: object
  contract.UpdateProfileRequest:
    properties:
      biography:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      profile_image:
        type: string
      pseudonym:
        type: string
    type: object
  contract.VerifyEmailRequest:
    properties:
      code:
        type: string
    required:
    - code
    type: object
  contract.VerifyEmailResponse:
    properties:
      message:
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is the swagger API for golang project layout.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: golang project layout server swagger API
  version: "1.0"
paths:
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: Authenticates user via predefined credentials and return JWT Token
      parameters:
      - description: Sign In Request Payload
        in: body
        name: SignInRequest
        required: true
        schema:
          $ref: '#/definitions/contract.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/contract.SignInResponse'
            type: array
        "400":
          description: Bad Request
          schema: {}
      summary: Signs In user into the system
      tags:
      - authentication
  /auth/sign-up:
    post:
      consumes:
      - application/json
      description: Reader can sign up to become a blogger
      parameters:
      - description: Sign up request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/contract.SignUpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contract.SignUpResponse'
        "400":
          description: Bad Request
          schema: {}
      summary: Register a new user
      tags:
      - authentication
  /auth/verify:
    post:
      consumes:
      - application/json
      description: Blogger can verify their email address upon signing up
      parameters:
      - description: Email verification request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/contract.VerifyEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contract.VerifyEmailResponse'
        "400":
          description: Bad Request
          schema: {}
      summary: Verify email address
      tags:
      - authentication
  /health:
    get:
      consumes:
      - application/json
      description: Perform server and dependent resource liveness check
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contract.HealthCheckResponse'
        "400":
          description: Bad Request
          schema: {}
      summary: Show server liveness
      tags:
      - health
  /profile:
    get:
      consumes:
      - application/json
      description: Respond profile detail information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contract.ProfileResponse'
        "400":
          description: Bad Request
          schema: {}
      security:
      - BearerToken: []
      summary: Respond profile detail information
      tags:
      - profile
    put:
      consumes:
      - application/json
      description: Blogger can update their profile information
      parameters:
      - description: Profile update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/contract.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/contract.ProfileResponse'
        "400":
          description: Bad Request
          schema: {}
      security:
      - BearerToken: []
      summary: Update profile information
      tags:
      - profile
  /profile/change-password:
    put:
      consumes:
      - application/json
      description: Blogger can change their account password
      parameters:
      - description: Change password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/contract.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema: {}
      security:
      - BearerToken: []
      summary: Change account password
      tags:
      - profile
securityDefinitions:
  BearerToken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
